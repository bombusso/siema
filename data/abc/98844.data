{'SSH_ASKPASS': 'C:/Program Files (x86)/Git/mingw32/libexec/git-core/git-gui--askpass', 'TMP': 'C:\\Users\\Marta\\AppData\\Local\\Temp', 'COMPUTERNAME': 'LENOVOY70-70', 'USERDOMAIN': 'LenovoY70-70', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'ORIGINAL_TMP': 'C:/Users/Marta/AppData/Local/Temp', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 60 Stepping 3, GenuineIntel', 'MSYSTEM_CHOST': 'i686-w64-mingw32', 'VBOX_MSI_INSTALL_PATH': 'C:\\Program Files\\Oracle\\VirtualBox\\', 'ACLOCAL_PATH': 'C:\\Program Files (x86)\\Git\\mingw32\\share\\aclocal;C:\\Program Files (x86)\\Git\\usr\\share\\aclocal', 'PROCESSOR_REVISION': '3c03', 'PATH': 'C:\\Users\\Marta\\bin;C:\\Program Files (x86)\\Git\\mingw32\\bin;C:\\Program Files (x86)\\Git\\usr\\local\\bin;C:\\Program Files (x86)\\Git\\usr\\bin;C:\\Program Files (x86)\\Git\\usr\\bin;C:\\Program Files (x86)\\Git\\mingw32\\bin;C:\\Program Files (x86)\\Git\\usr\\bin;C:\\Users\\Marta\\bin;C:\\programdata\\oracle\\java\\javapath;C:\\windows\\system32;C:\\windows;C:\\windows\\system32\\wbem;C:\\windows\\system32\\windowspowershell\\v1.0;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Python27;C:\\Python27\\Scripts;C:\\Program Files (x86)\\Git\\cmd;C:\\Program Files (x86)\\Git\\usr\\bin\\vendor_perl;C:\\Program Files (x86)\\Git\\usr\\bin\\core_perl', 'HOME': 'C:\\Users\\Marta', 'EXEPATH': 'C:\\Program Files (x86)\\Git', 'PS1': '\\[\\033]0;$TITLEPREFIX:$PWD\\007\\]\\n\\[\\033[32m\\]\\u@\\h \\[\\033[35m\\]$MSYSTEM \\[\\033[33m\\]\\w\\[\\033[36m\\]`__git_ps1`\\[\\033[0m\\]\\n$ ', 'DISPLAY': 'needs-to-be-defined', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'LANG': 'pl_PL.UTF-8', 'INFOPATH': 'C:\\Program Files (x86)\\Git\\usr\\local\\info;C:\\Program Files (x86)\\Git\\usr\\share\\info;C:\\Program Files (x86)\\Git\\usr\\info;C:\\Program Files (x86)\\Git\\share\\info', 'TERM': 'xterm', 'SHELL': 'C:\\Program Files (x86)\\Git\\usr\\bin\\bash.exe', 'TEMP': 'C:\\Users\\Marta\\AppData\\Local\\Temp', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'SHLVL': '1', 'TVT': 'C:\\Program Files (x86)\\Lenovo', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROGRAMDATA': 'C:\\ProgramData', 'PROCESSOR_ARCHITECTURE': 'x86', 'ORIGINAL_TEMP': 'C:/Users/Marta/AppData/Local/Temp', 'PLINK_PROTOCOL': 'ssh', 'USERPROFILE': 'C:\\Users\\Marta', '_': 'C:/Python27/python', 'MANPATH': 'C:\\Program Files (x86)\\Git\\mingw32\\share\\man;C:\\Program Files (x86)\\Git\\usr\\local\\man;C:\\Program Files (x86)\\Git\\usr\\share\\man;C:\\Program Files (x86)\\Git\\usr\\man;C:\\Program Files (x86)\\Git\\share\\man', 'HOMEPATH': '\\Users\\Marta', 'USERDOMAIN_ROAMINGPROFILE': 'LenovoY70-70', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'Marta', 'MINGW_CHOST': 'i686-w64-mingw32', 'LOGONSERVER': '\\\\LENOVOY70-70', 'SYSTEMROOT': 'C:\\Windows', 'MSYSTEM': 'MINGW32', 'LOCALAPPDATA': 'C:\\Users\\Marta\\AppData\\Local', 'ESET_OPTIONS': '                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ', 'PUBLIC': 'C:\\Users\\Public', 'SESSIONNAME': 'Console', 'PKG_CONFIG_PATH': 'C:\\Program Files (x86)\\Git\\mingw32\\lib\\pkgconfig;C:\\Program Files (x86)\\Git\\mingw32\\share\\pkgconfig', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'MSYSTEM_PREFIX': 'C:/Program Files (x86)/Git/mingw32', 'MSYSTEM_CARCH': 'i686', 'TMPDIR': 'C:\\Users\\Marta\\AppData\\Local\\Temp', 'FP_NO_HOST_CHECK': 'NO', 'ORIGINAL_PATH': 'C:\\Program Files (x86)\\Git\\mingw32\\bin;C:\\Program Files (x86)\\Git\\usr\\bin;C:\\Users\\Marta\\bin;C:\\programdata\\oracle\\java\\javapath;C:\\windows\\system32;C:\\windows;C:\\windows\\system32\\wbem;C:\\windows\\system32\\windowspowershell\\v1.0;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Python27;C:\\Python27\\Scripts;C:\\Program Files (x86)\\Git\\cmd', 'CONFIG_SITE': 'C:/Program Files (x86)/Git/mingw32/etc/config.site', 'MOZ_PLUGIN_PATH': 'C:\\Program Files (x86)\\Foxit Software\\Foxit Reader\\plugins\\', 'HOMEDRIVE': 'C:', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'SYSTEMDRIVE': 'C:', 'HOSTNAME': 'LenovoY70-70', 'MINGW_PACKAGE_PREFIX': 'mingw-w64-i686', 'NUMBER_OF_PROCESSORS': '8', 'APPDATA': 'C:\\Users\\Marta\\AppData\\Roaming', 'PWD': 'C:/Users/Marta', 'PROCESSOR_LEVEL': '6', 'MINGW_PREFIX': 'C:/Program Files (x86)/Git/mingw32', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'OS': 'Windows_NT', 'OLDPWD': 'C:/Users/Marta/siema', 'WINDIR': 'C:\\Windows'}